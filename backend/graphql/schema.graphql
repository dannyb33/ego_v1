enum ComponentType {
  BIO
  LINK
  IMAGE
  TEXT
}

enum PostType {
  TEXT
  IMAGE
}

enum BackgroundType {
  COLOR
  IMAGE
}

enum ContentType {
  JPEG
  PNG
}

type UserProfile {
  uuid: String!
  username: String!
  displayName: String!
  bio: String!
  followingCount: Int!
  followerCount: Int!
  postCount: Int!
  createdAt: String!
  updatedAt: String!
}

type PageResponse {
  page: PageInfo!
  components: [Component!]!
  componentCount: Int!
  totalSections: Int!
}

type PageInfo {
  createdAt: String!
  updatedAt: String!
  sectionCount: Int!
  backgroundType: BackgroundType!
  backgroundColor: String!
  backgroundImage: String
  font: String!
}

interface Component {
  createdAt: String!
  updatedAt: String!
  order: Int!
  uuid: String!
  componentType: ComponentType!
}

type BioComponent implements Component {
  createdAt: String!
  updatedAt: String!
  order: Int!
  uuid: String!
  componentType: ComponentType!
  username: String!
  displayName: String!
  bio: String!
  followingCount: Int!
  followerCount: Int!
  postCount: Int!
}

type TextComponent implements Component {
  createdAt: String!
  updatedAt: String!
  order: Int!
  uuid: String!
  componentType: ComponentType!
  font: String!
  backgroundColor: String!
  text: String!
}

type ImageComponent implements Component {
  createdAt: String!
  updatedAt: String!
  order: Int!
  uuid: String!
  componentType: ComponentType!
  imageUrl: String!
}

input ComponentUpdateInput {
  font: String
  backgroundColor: String
  text: String
}

type FollowerResponse {
  createdAt: String!
  updatedAt: String!
  followerUsername: String!
}

interface Post {
  createdAt: String!
  updatedAt: String!
  username: String!
  displayName: String!
  uuid: String!
  postType: PostType!
}

type TextPost implements Post {
  createdAt: String!
  updatedAt: String!
  username: String!
  displayName: String!
  uuid: String!
  postType: PostType!
  text: String!
}

type ImagePost implements Post {
  createdAt: String!
  updatedAt: String!
  username: String!
  displayName: String!
  uuid: String!
  postType: PostType!
  text: String!
  imageUrl: String!
}

type FollowedUser {
  createdAt: String!
  updatedAt: String!
  followingUsername: String!
  followingDisplayName: String!
  followingSub: ID!
}

type UrlResponse {
  uploadUrl: String!
  imageUrl: String!
}

type Query {
    getCurrentUser: UserProfile
    getUser(sub: ID!): UserProfile
    searchUsers(query: String!): [UserProfile]
    getCurrentPage: PageResponse
    getPage(sub: ID!): PageResponse

    getUsersFollowed: [FollowedUser]

    getCurrentPosts: [Post]
    getUserPosts(sub: ID!): [Post]

    getUploadUrl(fileName: String!, contentType: ContentType!): UrlResponse
}

type Mutation {
  addPageComponent(type: ComponentType!): Component
  removePageComponent(componentId: ID!): Component
  movePageComponent(componentId: ID!, newOrder: Int!): Component
  editPageComponent(componentId: ID!, updates: ComponentUpdateInput!): Component

  followUser(userId: ID!): UserProfile
  unfollowUser(userId: ID!): UserProfile

  createTextPost(text: String!): Post
  createImagePost(imageUrl: String!, text: String): Post
}